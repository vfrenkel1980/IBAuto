group 'IBAutomation'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'application'

mainClassName = 'Native.uitests.VSTest'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    flatDir {
        dirs 'lib'
    }

}
def UI = project.hasProperty("UI")
def BatmanSim = project.hasProperty("BatmanSim")
def VmSim = project.hasProperty("VmSim")
def RobinSim = project.hasProperty("RobinSim")
def AlfredSim = project.hasProperty("AlfredSim")
def Babylon = project.hasProperty("Babylon")
def Phoenix = project.hasProperty("Phoenix")
def LinuxCL = project.hasProperty("LinuxCL")
def LinuxSanity = project.hasProperty("LinuxSanity")
def LinuxMultiBuild = project.hasProperty("LinuxMultiBuild")
def LinuxMultiInitiator = project.hasProperty("LinuxMultiInitiator")
def Unit = project.hasProperty("Unit")
def VSPreview = project.hasProperty("VSPreview")
def VSIntegration = project.hasProperty("VSIntegration")
def LicenseTests = project.hasProperty("LicenseTests")
def PositiveLicenseTests = project.hasProperty("PositiveLicenseTests")
def AgentSettings = project.hasProperty("AgentSettings")
def UIValidations = project.hasProperty("UIValidations")
def Setup = project.hasProperty("Setup")
def WebRegression = project.hasProperty("WebRegression")
def ENWebRegression = project.hasProperty("ENWebRegression")
def JPWebRegression = project.hasProperty("JPWebRegression")
def Sanity = project.hasProperty("Sanity")
def Dashboard = project.hasProperty("Dashboard")
def DBSchemas = project.hasProperty("DBSchemas")

dependencies {
    compile group: 'org.testng', name: 'testng', version: '6.11'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-server', version: '3.6.0'
    compile group: 'net.java.dev.jna', name: 'jna-platform', version: '4.5.0'
    compile group: 'net.java.dev.jna', name: 'jna', version: '4.5.0'
    compile group: 'com.aventstack', name: 'extentreports', version: '3.1.5'

    compile group: 'com.melloware', name: 'jintellitype', version: '1.3.9'
    compile group: 'com.nativelibs4java', name: 'bridj', version: '0.7.0'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
    compile group: 'org.apache.commons', name: 'commons-exec', version: '1.3'
    compile group: 'org.jprocesses', name: 'jProcesses', version: '1.6.4'
    compile group: 'com.profesorfalken', name: 'WMI4Java', version: '1.6.1'
    compile name:'sikulixapi'
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-chrome-driver', version: '2.23.0'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-firefox-driver', version: '3.11.0'
    compile group: 'io.appium', name: 'java-client', version: '5.0.4'

    compile group: 'com.google.inject', name: 'guice', version: '4.0'
    compile group: 'org.uncommons', name: 'reportng', version: '1.1.4'
    compile group: 'velocity', name: 'velocity-dep', version: '1.4'
    compile group: 'org.jdom', name: 'jdom', version: '2.0.0'
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    compile group: 'net.lingala.zip4j', name: 'zip4j', version: '1.3.2'
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile group: 'com.github.mmarquee', name: 'ui-automation', version: '0.4.3'
    compile group: 'javax.mail', name: 'mail', version: '1.4.7'
    compile group: 'postgresql', name: 'postgresql', version: '9.0-801.jdbc4'
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.25.2'
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    compile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.0'

}

test {

    ignoreFailures = true
    //scenario parameter for VStests
    systemProperty 'scenario', System.properties['scenario'] ?: '0'
    systemProperty 'scenario', System.properties['scenario'] ?: '1'
    systemProperty 'scenario', System.properties['scenario'] ?: '2'
    systemProperty 'scenario', System.properties['scenario'] ?: '3'
    systemProperty 'scenario', System.properties['scenario'] ?: '4'
    systemProperty 'scenario', System.properties['scenario'] ?: '5'
    //VSinstallation parameter for VStests
    systemProperty 'vsinstallation', System.properties['vsinstallation'] ?: '15'
    systemProperty 'vsinstallation', System.properties['vsinstallation'] ?: 'preview'
    //Sim environment for Linux simulations
    systemProperty 'env', System.properties['env'] ?: 'linuxsim1a'
    systemProperty 'env', System.properties['env'] ?: 'linuxsim1b'
    systemProperty 'env', System.properties['env'] ?: 'linuxsim2a'
    systemProperty 'env', System.properties['env'] ?: 'linuxsim2b'
    //Linux version selection
    systemProperty "version", System.getProperty("version")

    // enable TestNG support (default is JUnit)
    useTestNG(){
        useDefaultListeners = true

        //suites("src/test/resources/testng.xml")
        if(UI) {
            suites "src/test/resources/UI.xml"
        }

        if(BatmanSim) {
            suites "src/test/resources/BatmanSim.xml"
        }

        if(VmSim) {
            suites "src/test/resources/VmSim.xml"
        }
        if(RobinSim) {
            suites "src/test/resources/RobinSim.xml"
        }

        if(AlfredSim) {
            suites "src/test/resources/AlfredSim.xml"
        }
        if(Babylon) {
            suites "src/test/resources/Babylon.xml"
        }
        if(Phoenix) {
            suites "src/test/resources/Phoenix.xml"
        }
        if(LinuxCL) {
            suites "src/test/resources/LinuxCL.xml"
        }

        if(LinuxMultiBuild) {
            suites "src/test/resources/LinuxMultiBuild.xml"
        }

        if(LinuxMultiInitiator) {
            suites "src/test/resources/LinuxMultiInitiator.xml"
        }

        if(Unit) {
            suites "src/test/resources/Unit.xml"
        }

        if(VSPreview) {
            suites "src/test/resources/VSPreview.xml"
        }

        if(VSIntegration) {
            suites "src/test/resources/VSIntegration.xml"
        }

        if(LicenseTests) {
            suites "src/test/resources/LicenseTests.xml"
        }

        if(PositiveLicenseTests) {
            suites "src/test/resources/PositiveLicenseTests.xml"
        }

        if(AgentSettings) {
            suites "src/test/resources/AgentSettings.xml"
        }

        if(UIValidations) {
            suites "src/test/resources/UIValidations.xml"
        }

        if(Setup) {
            suites "src/test/resources/Setup.xml"
        }

        if(WebRegression) {
            suites "src/test/resources/WebRegression.xml"
        }
        
        if(ENWebRegression) {
            suites "src/test/resources/ENWebRegression.xml"
        }

        if(JPWebRegression) {
            suites "src/test/resources/JPWebRegression.xml"
        }

        if(Sanity) {
            suites "src/test/resources/Sanity.xml"
        }

        if(Dashboard) {
            suites "src/test/resources/Dashboard.xml"
        }

        if(DBSchemas) {
            suites "src/test/resources/DBSchemas.xml"
        }
        if(LinuxSanity) {
            suites "src/test/resources/LinuxSanity.xml"
        }
    }

}
