<?xml version="1.0" encoding="utf-8" standalone="no" ?>
<!--This file represents the results of running a test suite-->
<test-results date="2020-01-12" errors="0" failures="0" ignored="0" inconclusive="0" invalid="0" name="C:\QA\Simulation\Testing\NUnit2\bin\tests\nunit.framework.tests.dll" not-run="0" skipped="0" time="11:35:43" total="1212">
  <environment clr-version="2.0.50727.9148" cwd="C:\QA\qa_automation" machine-name="WINDOWS-QA-1" nunit-version="2.6.4.14350" os-version="Microsoft Windows NT 6.2.9200.0" platform="Win32NT" user="Administrator" user-domain="WINDOWS-QA-1"/>
  <culture-info current-culture="en-US" current-uiculture="en-US"/>
  <test-suite asserts="0" executed="True" name="C:\QA\Simulation\Testing\NUnit2\bin\tests\nunit.framework.tests.dll" result="Success" success="True" time="7.991" type="Assembly">
    <results>
      <test-suite asserts="0" executed="True" name="NUnit" result="Success" success="True" time="7.966" type="Namespace">
        <results>
          <test-suite asserts="0" executed="True" name="Framework" result="Success" success="True" time="7.966" type="Namespace">
            <results>
              <test-suite asserts="0" executed="True" name="Constraints" result="Success" success="True" time="0.987" type="Namespace">
                <results>
                  <test-suite asserts="0" executed="True" name="EmptyConstraintTest" result="Success" success="True" time="0.100" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EmptyConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" result="Success" success="True" time="0.042"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EmptyConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" result="Success" success="True" time="0.000"/>
                      <test-suite asserts="0" executed="True" name="FailsWithBadValues" result="Success" success="True" time="0.008" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EmptyConstraintTest.FailsWithBadValues(&quot;Hello&quot;)" result="Success" success="True" time="0.003"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EmptyConstraintTest.FailsWithBadValues(System.Object[])" result="Success" success="True" time="0.002"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="InvalidDataThrowsArgumentException" result="Success" success="True" time="0.007" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Constraints.EmptyConstraintTest.InvalidDataThrowsArgumentException(null)" result="Success" success="True" time="0.005"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Constraints.EmptyConstraintTest.InvalidDataThrowsArgumentException(5)" result="Success" success="True" time="0.001"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="ProvidesProperFailureMessage" result="Success" success="True" time="0.010" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EmptyConstraintTest.ProvidesProperFailureMessage(&quot;Hello&quot;,&quot;\&quot;Hello\&quot;&quot;)" result="Success" success="True" time="0.006"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EmptyConstraintTest.ProvidesProperFailureMessage(System.Object[],&quot;&lt; 1, 2, 3 >&quot;)" result="Success" success="True" time="0.003"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="SucceedsWithGoodValues" result="Success" success="True" time="0.004" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EmptyConstraintTest.SucceedsWithGoodValues(&quot;&quot;)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EmptyConstraintTest.SucceedsWithGoodValues(System.Object[])" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EmptyConstraintTest.SucceedsWithGoodValues(System.Collections.ArrayList)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EmptyConstraintTest.SucceedsWithGoodValues(System.Collections.Generic.List`1[System.Int32])" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="EqualConstraintTests" result="Success" success="True" time="0.168" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDates" result="Success" success="True" time="0.006"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDatesWithinDays" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDatesWithinHours" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDatesWithinMilliseconds" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDatesWithinMinutes" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDatesWithinSeconds" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDatesWithinTicks" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDatesWithinTimeSpan" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDictionaries_DifferentOrder" result="Success" success="True" time="0.011"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDictionaries_Failure" result="Success" success="True" time="0.010"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDictionaries_SameOrder" result="Success" success="True" time="0.001"/>
                      <test-suite asserts="0" executed="True" name="CanMatchDoublesWithRelativeTolerance" result="Success" success="True" time="0.006" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDoublesWithRelativeTolerance(9500.0d)" result="Success" success="True" time="0.004"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDoublesWithRelativeTolerance(10000.0d)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDoublesWithRelativeTolerance(10500.0d)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="CanMatchDoublesWithUlpTolerance" result="Success" success="True" time="0.003" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDoublesWithUlpTolerance(2E+16.0d)" result="Success" success="True" time="0.002"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchDoublesWithUlpTolerance(2E+16.0d)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchHashtables_DifferentOrder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchHashtables_Failure" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchHashtables_SameOrder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchHashtableWithDictionary" result="Success" success="True" time="0.001"/>
                      <test-suite asserts="0" executed="True" name="CanMatchSinglesWithRelativeTolerance" result="Success" success="True" time="0.006" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSinglesWithRelativeTolerance(9500.0f)" result="Success" success="True" time="0.003"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSinglesWithRelativeTolerance(10000.0f)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSinglesWithRelativeTolerance(10500.0f)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="CanMatchSinglesWithUlpTolerance" result="Success" success="True" time="0.003" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSinglesWithUlpTolerance(2E+07.0f)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSinglesWithUlpTolerance(2E+07.0f)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="CanMatchSpecialFloatingPointValues" result="Success" success="True" time="0.005" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSpecialFloatingPointValues(double.NaN)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSpecialFloatingPointValues(float.PositiveInfinity)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSpecialFloatingPointValues(double.PositiveInfinity)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSpecialFloatingPointValues(float.NegativeInfinity)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSpecialFloatingPointValues(double.NegativeInfinity)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchSpecialFloatingPointValues(float.NaN)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchTimeSpanWithinMinutes" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.CanMatchUsingIsEqualToWithinTimeSpan" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ConstraintTestBaseNoData.ProvidesProperDescription" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" result="Success" success="True" time="0.000"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfDaysPrecedesWithin" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfHoursPrecedesWithin" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfMillisecondsPrecedesWithin" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfMinutesPrecedesWithin" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfPercentPrecedesWithin" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfSecondsPrecedesWithin" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfTicksPrecedesWithin" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfUlpsIsUsedOnDecimal" result="Success" success="True" time="0.001"/>
                      <test-suite asserts="0" executed="True" name="ErrorIfUlpsIsUsedOnIntegralType" result="Success" success="True" time="0.004" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfUlpsIsUsedOnIntegralType(1000UL,1010UL)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfUlpsIsUsedOnIntegralType(1000L,1010L)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfUlpsIsUsedOnIntegralType(1000,1010)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfUlpsIsUsedOnIntegralType(1000,1010)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorIfUlpsPrecedesWithin" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorWithPercentAndUlpsToleranceModes" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ErrorWithUlpsAndPercentToleranceModes" result="Success" success="True" time="0.001"/>
                      <test-suite asserts="0" executed="True" name="FailsOnDoublesOutsideOfRelativeTolerance" result="Success" success="True" time="0.005" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnDoublesOutsideOfRelativeTolerance(11500.0d)" result="Success" success="True" time="0.004"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnDoublesOutsideOfRelativeTolerance(8500.0d)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="FailsOnDoublesOutsideOfUlpTolerance" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnDoublesOutsideOfUlpTolerance(2E+16.0d)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnDoublesOutsideOfUlpTolerance(2E+16.0d)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="FailsOnSinglesOutsideOfRelativeTolerance" result="Success" success="True" time="0.003" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnSinglesOutsideOfRelativeTolerance(8500.0f)" result="Success" success="True" time="0.002"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnSinglesOutsideOfRelativeTolerance(11500.0f)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="FailsOnSinglesOutsideOfUlpTolerance" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnSinglesOutsideOfUlpTolerance(2E+07.0f)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.FailsOnSinglesOutsideOfUlpTolerance(2E+07.0f)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="FailsWithBadValues" result="Success" success="True" time="0.003" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.FailsWithBadValues(5)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.FailsWithBadValues(null)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.FailsWithBadValues(&quot;Hello&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.FailsWithBadValues(double.NaN)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.FailsWithBadValues(double.PositiveInfinity)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="ProvidesProperFailureMessage" result="Success" success="True" time="0.003" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ProvidesProperFailureMessage(5,&quot;5&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ProvidesProperFailureMessage(null,&quot;null&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ProvidesProperFailureMessage(&quot;Hello&quot;,&quot;\&quot;Hello\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ProvidesProperFailureMessage(double.NaN,&quot;NaN&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.ProvidesProperFailureMessage(double.PositiveInfinity,&quot;Infinity&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="SucceedsWithGoodValues" result="Success" success="True" time="0.006" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.SucceedsWithGoodValues(4)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.SucceedsWithGoodValues(4.0f)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.SucceedsWithGoodValues(4.0d)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.SucceedsWithGoodValues(4.0000m)" result="Success" success="True" time="0.004"/>
                        </results>
                      </test-suite>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedArrayComparer" result="Success" success="True" time="0.007"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedComparerOfT" result="Success" success="True" time="0.004"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedComparisonOfT" result="Success" success="True" time="0.003"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedEqualityComparer" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedEqualityComparerOfT" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedIComparer" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedLambda_IntArgs" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedLambda_StringArgs" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests.UsesProvidedListComparer" result="Success" success="True" time="0.002"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="EqualConstraintTests+DateTimeOffSetEquality" result="Success" success="True" time="0.011" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchDates" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchDatesWithinDays" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchDatesWithinMilliseconds" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchDatesWithinMinutes" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchDatesWithinSeconds" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchDatesWithinTicks" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchDatesWithinTimeSpan" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.CanMatchUsingIsEqualToWithinTimeSpan" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualConstraintTests+DateTimeOffSetEquality.DTimeOffsetCanMatchDatesWithinHours" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="EqualityComparerTests" result="Success" success="True" time="0.065" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualityComparerTests.CanCompareArrayContainingSelfToSelf" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualityComparerTests.CrossReferencingRecursiveEnumerablesAreNotEqual" result="Success" success="True" time="0.047"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualityComparerTests.IEquatableDifferentTypesSuccess_WhenActualImplementsIEquatable" result="Success" success="True" time="0.006"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualityComparerTests.IEquatableDifferentTypesSuccess_WhenExpectedImplementsIEquatable" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualityComparerTests.IEquatableHasPrecedenceOverDefaultEquals" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualityComparerTests.IEquatableSuccess" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualityComparerTests.RecursionCheckDoesNotRelyOnValueEquality" result="Success" success="True" time="0.007"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualityComparerTests.ReferenceEqualityHasPrecedenceOverIEquatable" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualityComparerTests.SelfContainingRecursiveEnumerablesAreNotEqual" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="PropertyTest" result="Success" success="True" time="0.100" type="TestFixture">
                    <results>
                      <test-suite asserts="0" executed="True" name="InvalidDataThrowsException" result="Success" success="True" time="0.048" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Constraints.PropertyTest.InvalidDataThrowsException(null)" result="Success" success="True" time="0.031"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Constraints.PropertyTest.InvalidDataThrowsException(42)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Constraints.PropertyTest.InvalidDataThrowsException(System.Collections.ArrayList)" result="Success" success="True" time="0.001"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="ProvidesProperFailureMessage" result="Success" success="True" time="0.028" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PropertyTest.ProvidesProperFailureMessage(System.Int32[],&quot;3&quot;)" result="Success" success="True" time="0.026"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PropertyTest.ProvidesProperFailureMessage(&quot;goodbye&quot;,&quot;7&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="SucceedsWithGoodValues" result="Success" success="True" time="0.003" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PropertyTest.SucceedsWithGoodValues(System.Int32[])" result="Success" success="True" time="0.002"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PropertyTest.SucceedsWithGoodValues(&quot;hello&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PropertyTest.ConstraintTestBaseNoData.ProvidesProperDescription" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PropertyTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" result="Success" success="True" time="0.000"/>
                      <test-suite asserts="0" executed="True" name="FailsWithBadValues" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PropertyTest.FailsWithBadValues(System.Int32[])" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PropertyTest.FailsWithBadValues(&quot;goodbye&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite><test-case asserts="2" executed="True" name="NUnit.Framework.Constraints.PropertyTest.PropertyEqualToValueWithTolerance" result="Success" success="True" time="0.002"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="ReusableConstraintTests" result="Success" success="True" time="0.022" type="TestFixture">
                    <results>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Constraints.ReusableConstraintTests.CanCreateReusableConstraintByImplicitConversion" result="Success" success="True" time="0.001"/>
                      <test-suite asserts="0" executed="True" name="CanReuseReusableConstraintMultipleTimes" result="Success" success="True" time="0.019" type="Theory">
                        <results>
                          <test-case asserts="3" executed="True" name="NUnit.Framework.Constraints.ReusableConstraintTests.CanReuseReusableConstraintMultipleTimes(&lt;not &lt;empty>>)" result="Success" success="True" time="0.003"/>
                          <test-case asserts="3" executed="True" name="NUnit.Framework.Constraints.ReusableConstraintTests.CanReuseReusableConstraintMultipleTimes(&lt;not &lt;null>>)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="3" executed="True" name="NUnit.Framework.Constraints.ReusableConstraintTests.CanReuseReusableConstraintMultipleTimes(&lt;property Length &lt;greaterthan 3>>)" result="Success" success="True" time="0.005"/>
                          <test-case asserts="3" executed="True" name="NUnit.Framework.Constraints.ReusableConstraintTests.CanReuseReusableConstraintMultipleTimes(&lt;and &lt;property Length &lt;equal 4>> &lt;startswith &quot;te&quot;>>)" result="Success" success="True" time="0.002"/>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="SameAsTest" result="Success" success="True" time="0.011" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SameAsTest.ConstraintTestBaseNoData.ProvidesProperDescription" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SameAsTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" result="Success" success="True" time="0.000"/>
                      <test-suite asserts="0" executed="True" name="FailsWithBadValues" result="Success" success="True" time="0.003" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SameAsTest.FailsWithBadValues(System.Object)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SameAsTest.FailsWithBadValues(3)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SameAsTest.FailsWithBadValues(&quot;Hello&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="ProvidesProperFailureMessage" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SameAsTest.ProvidesProperFailureMessage(System.Object,&quot;&lt;System.Object>&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SameAsTest.ProvidesProperFailureMessage(3,&quot;3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SameAsTest.ProvidesProperFailureMessage(&quot;Hello&quot;,&quot;\&quot;Hello\&quot;&quot;)" result="Success" success="True" time="0.001"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="SucceedsWithGoodValues" result="Success" success="True" time="0.000" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SameAsTest.SucceedsWithGoodValues(System.Object)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="SamePathOrUnderTest_Linux" result="Success" success="True" time="0.025" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ConstraintTestBaseNoData.ProvidesProperDescription" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" result="Success" success="True" time="0.001"/>
                      <test-suite asserts="0" executed="True" name="FailsWithBadValues" result="Success" success="True" time="0.009" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(123)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/Folder1/Folder2&quot;)" result="Success" success="True" time="0.004"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/FOLDER1/./junk/../Folder2&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/folder1/folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/folder1/./folder2/../folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.FailsWithBadValues(&quot;/folder1&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="ProvidesProperFailureMessage" result="Success" success="True" time="0.004" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(123,&quot;123&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/Folder1/Folder2&quot;,&quot;\&quot;/Folder1/Folder2\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/FOLDER1/./junk/../Folder2&quot;,&quot;\&quot;/FOLDER1/./junk/../Folder2\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3&quot;,&quot;\&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/folder3&quot;,&quot;\&quot;/folder1/folder3\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/./folder2/../folder3&quot;,&quot;\&quot;/folder1/./folder2/../folder3\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.ProvidesProperFailureMessage(&quot;/folder1&quot;,&quot;\&quot;/folder1\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="SucceedsWithGoodValues" result="Success" success="True" time="0.005" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/folder2&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./folder2&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/junk/../folder2&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;\\folder1\\folder2&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/folder2/folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./folder2/folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;/folder1/junk/../folder2/folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Linux.SucceedsWithGoodValues(&quot;\\folder1\\folder2\\folder3&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="SamePathOrUnderTest_Windows" result="Success" success="True" time="0.019" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.ConstraintTestBaseNoData.ProvidesProperDescription" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" result="Success" success="True" time="0.000"/>
                      <test-suite asserts="0" executed="True" name="FailsWithBadValues" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.FailsWithBadValues(123)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="ProvidesProperFailureMessage" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.ProvidesProperFailureMessage(123,&quot;123&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\folder3&quot;,&quot;\&quot;C:\\folder1\\folder3\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;,&quot;\&quot;C:\\folder1\\.\\folder2\\..\\file.temp\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="SucceedsWithGoodValues" result="Success" success="True" time="0.010" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\folder2&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\Folder1\\Folder2&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\.\\folder2&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\junk\\..\\folder2&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:/folder1/folder2&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\folder2\\folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\.\\folder2\\folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\junk\\..\\folder2\\folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2\\temp\\..\\Folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathOrUnderTest_Windows.SucceedsWithGoodValues(&quot;C:/folder1/folder2/folder3&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="SamePathTest_Linux" result="Success" success="True" time="0.017" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.ConstraintTestBaseNoData.ProvidesProperDescription" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" result="Success" success="True" time="0.000"/>
                      <test-suite asserts="0" executed="True" name="FailsWithBadValues" result="Success" success="True" time="0.004" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(123)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;/folder2/file.tmp&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;folder1/file.tmp&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;//folder1/file.tmp&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;/folder1/./folder2/../file.temp&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;/Folder1/File.TMP&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.FailsWithBadValues(&quot;/FOLDER1/./folder2/../File.TMP&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="ProvidesProperFailureMessage" result="Success" success="True" time="0.004" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(123,&quot;123&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;/folder2/file.tmp&quot;,&quot;\&quot;/folder2/file.tmp\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;folder1/file.tmp&quot;,&quot;\&quot;folder1/file.tmp\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;//folder1/file.tmp&quot;,&quot;\&quot;//folder1/file.tmp\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/./folder2/../file.temp&quot;,&quot;\&quot;/folder1/./folder2/../file.temp\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;/Folder1/File.TMP&quot;,&quot;\&quot;/Folder1/File.TMP\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.ProvidesProperFailureMessage(&quot;/FOLDER1/./folder2/../File.TMP&quot;,&quot;\&quot;/FOLDER1/./folder2/../File.TMP\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.RootPathEquality" result="Success" success="True" time="0.001"/>
                      <test-suite asserts="0" executed="True" name="SucceedsWithGoodValues" result="Success" success="True" time="0.003" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/file.tmp&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./file.tmp&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/folder2/../file.tmp&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./folder2/../file.tmp&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Linux.SucceedsWithGoodValues(&quot;\\folder1\\file.tmp&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="SamePathTest_Windows" result="Success" success="True" time="0.012" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Windows.ConstraintTestBaseNoData.ProvidesProperDescription" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Windows.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" result="Success" success="True" time="0.000"/>
                      <test-suite asserts="0" executed="True" name="FailsWithBadValues" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Windows.FailsWithBadValues(123)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Windows.FailsWithBadValues(&quot;C:\\folder2\\file.tmp&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="ProvidesProperFailureMessage" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Windows.ProvidesProperFailureMessage(123,&quot;123&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder2\\file.tmp&quot;,&quot;\&quot;C:\\folder2\\file.tmp\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;,&quot;\&quot;C:\\folder1\\.\\folder2\\..\\file.temp\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Windows.RootPathEquality" result="Success" success="True" time="0.000"/>
                      <test-suite asserts="0" executed="True" name="SucceedsWithGoodValues" result="Success" success="True" time="0.004" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\file.tmp&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\Folder1\\File.TMP&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\.\\file.tmp&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\folder2\\..\\file.tmp&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:\\FOLDER1\\.\\folder2\\..\\File.TMP&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SamePathTest_Windows.SucceedsWithGoodValues(&quot;C:/folder1/file.tmp&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="SubPathTest_Linux" result="Success" success="True" time="0.024" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.ConstraintTestBaseNoData.ProvidesProperDescription" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" result="Success" success="True" time="0.000"/>
                      <test-suite asserts="0" executed="True" name="FailsWithBadValues" result="Success" success="True" time="0.007" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(123)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/Folder1/Folder2&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/FOLDER1/./junk/../Folder2&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/folder1/folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/folder1/./folder2/../folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/folder1&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/folder1/folder2&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/folder1/./folder2&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;/folder1/junk/../folder2&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.FailsWithBadValues(&quot;\\folder1\\folder2&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="ProvidesProperFailureMessage" result="Success" success="True" time="0.009" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(123,&quot;123&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/Folder1/Folder2&quot;,&quot;\&quot;/Folder1/Folder2\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/FOLDER1/./junk/../Folder2&quot;,&quot;\&quot;/FOLDER1/./junk/../Folder2\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3&quot;,&quot;\&quot;/FOLDER1/./junk/../Folder2/temp/../Folder3\&quot;&quot;)" result="Success" success="True" time="0.002"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/folder3&quot;,&quot;\&quot;/folder1/folder3\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/./folder2/../folder3&quot;,&quot;\&quot;/folder1/./folder2/../folder3\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1&quot;,&quot;\&quot;/folder1\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/folder2&quot;,&quot;\&quot;/folder1/folder2\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/./folder2&quot;,&quot;\&quot;/folder1/./folder2\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;/folder1/junk/../folder2&quot;,&quot;\&quot;/folder1/junk/../folder2\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.ProvidesProperFailureMessage(&quot;\\folder1\\folder2&quot;,&quot;\&quot;\\folder1\\folder2\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.SubPathOfRoot" result="Success" success="True" time="0.001"/>
                      <test-suite asserts="0" executed="True" name="SucceedsWithGoodValues" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/folder2/folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/./folder2/folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.SucceedsWithGoodValues(&quot;/folder1/junk/../folder2/folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Linux.SucceedsWithGoodValues(&quot;\\folder1\\folder2\\folder3&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="SubPathTest_Windows" result="Success" success="True" time="0.019" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.ConstraintTestBaseNoData.ProvidesProperDescription" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" result="Success" success="True" time="0.000"/>
                      <test-suite asserts="0" executed="True" name="FailsWithBadValues" result="Success" success="True" time="0.005" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(123)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\folder2&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:\\Folder1\\Folder2&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\.\\folder2&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:\\folder1\\junk\\..\\folder2&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.FailsWithBadValues(&quot;C:/folder1/folder2&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="ProvidesProperFailureMessage" result="Success" success="True" time="0.005" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(123,&quot;123&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\folder3&quot;,&quot;\&quot;C:\\folder1\\folder3\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\.\\folder2\\..\\file.temp&quot;,&quot;\&quot;C:\\folder1\\.\\folder2\\..\\file.temp\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\folder2&quot;,&quot;\&quot;C:\\folder1\\folder2\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\Folder1\\Folder2&quot;,&quot;\&quot;C:\\Folder1\\Folder2\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\.\\folder2&quot;,&quot;\&quot;C:\\folder1\\.\\folder2\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\folder1\\junk\\..\\folder2&quot;,&quot;\&quot;C:\\folder1\\junk\\..\\folder2\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2&quot;,&quot;\&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.ProvidesProperFailureMessage(&quot;C:/folder1/folder2&quot;,&quot;\&quot;C:/folder1/folder2\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.SubPathOfRoot" result="Success" success="True" time="0.000"/>
                      <test-suite asserts="0" executed="True" name="SucceedsWithGoodValues" result="Success" success="True" time="0.003" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\folder2\\folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\.\\folder2\\folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.SucceedsWithGoodValues(&quot;C:\\folder1\\junk\\..\\folder2\\folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.SucceedsWithGoodValues(&quot;C:\\FOLDER1\\.\\junk\\..\\Folder2\\temp\\..\\Folder3&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.SubPathTest_Windows.SucceedsWithGoodValues(&quot;C:/folder1/folder2/folder3&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="ThrowsConstraintTest_ExactType" result="Success" success="True" time="0.019" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.ConstraintTestBaseNoData.ProvidesProperDescription" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" result="Success" success="True" time="0.000"/>
                      <test-suite asserts="0" executed="True" name="FailsWithBadValues" result="Success" success="True" time="0.008" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.FailsWithBadValues(NUnit.Framework.TestDelegate)" result="Success" success="True" time="0.006"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.FailsWithBadValues(NUnit.Framework.TestDelegate)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.FailsWithBadValues(NUnit.Framework.TestDelegate)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="ProvidesProperFailureMessage" result="Success" success="True" time="0.003" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.ApplicationException>&quot;)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;no exception thrown&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.Exception>&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="SucceedsWithGoodValues" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_ExactType.SucceedsWithGoodValues(NUnit.Framework.TestDelegate)" result="Success" success="True" time="0.001"/>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="ThrowsConstraintTest_InstanceOfType" result="Success" success="True" time="0.015" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.ConstraintTestBaseNoData.ProvidesProperDescription" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" result="Success" success="True" time="0.000"/>
                      <test-suite asserts="0" executed="True" name="FailsWithBadValues" result="Success" success="True" time="0.004" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.FailsWithBadValues(NUnit.Framework.TestDelegate)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.FailsWithBadValues(NUnit.Framework.TestDelegate)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.FailsWithBadValues(NUnit.Framework.TestDelegate)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="ProvidesProperFailureMessage" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.ArgumentException>&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;no exception thrown&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.Exception>&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="SucceedsWithGoodValues" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.SucceedsWithGoodValues(NUnit.Framework.TestDelegate)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_InstanceOfType.SucceedsWithGoodValues(NUnit.Framework.TestDelegate)" result="Success" success="True" time="0.001"/>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="ThrowsConstraintTest_WithConstraint" result="Success" success="True" time="0.010" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.ConstraintTestBaseNoData.ProvidesProperDescription" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" result="Success" success="True" time="0.000"/>
                      <test-suite asserts="0" executed="True" name="FailsWithBadValues" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.FailsWithBadValues(NUnit.Framework.TestDelegate)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.FailsWithBadValues(NUnit.Framework.TestDelegate)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.FailsWithBadValues(NUnit.Framework.TestDelegate)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="ProvidesProperFailureMessage" result="Success" success="True" time="0.003" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.ApplicationException>&quot;)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;no exception thrown&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.ProvidesProperFailureMessage(NUnit.Framework.TestDelegate,&quot;&lt;System.Exception>&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="SucceedsWithGoodValues" result="Success" success="True" time="0.001" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ThrowsConstraintTest_WithConstraint.SucceedsWithGoodValues(NUnit.Framework.TestDelegate)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="ToStringTests" result="Success" success="True" time="0.029" type="TestFixture">
                    <results>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Constraints.ToStringTests.CanDisplayPrefixConstraints_Resolved" result="Success" success="True" time="0.003"/>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Constraints.ToStringTests.CanDisplaySimpleConstraints_Resolved" result="Success" success="True" time="0.019"/>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Constraints.ToStringTests.CanDisplaySimpleConstraints_Unresolved" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ToStringTests.DisplayBinaryConstraints_Resolved" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.ToStringTests.DisplayBinaryConstraints_UnResolved" result="Success" success="True" time="0.001"/>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Constraints.ToStringTests.DisplayPrefixConstraints_Unresolved" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="TrueConstraintTest" result="Success" success="True" time="0.076" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.TrueConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.TrueConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" result="Success" success="True" time="0.000"/>
                      <test-suite asserts="0" executed="True" name="FailsWithBadValues" result="Success" success="True" time="0.046" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.TrueConstraintTest.FailsWithBadValues(null)" result="Success" success="True" time="0.028"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.TrueConstraintTest.FailsWithBadValues(&quot;hello&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.TrueConstraintTest.FailsWithBadValues(False)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.TrueConstraintTest.FailsWithBadValues(False)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite><test-suite asserts="0" executed="True" name="ProvidesProperFailureMessage" result="Success" success="True" time="0.024" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.TrueConstraintTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" result="Success" success="True" time="0.019"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.TrueConstraintTest.ProvidesProperFailureMessage(&quot;hello&quot;,&quot;\&quot;hello\&quot;&quot;)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.TrueConstraintTest.ProvidesProperFailureMessage(False,&quot;False&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.TrueConstraintTest.ProvidesProperFailureMessage(False,&quot;False&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite><test-suite asserts="0" executed="True" name="SucceedsWithGoodValues" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.TrueConstraintTest.SucceedsWithGoodValues(True)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.TrueConstraintTest.SucceedsWithGoodValues(True)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite></results>
                  </test-suite><test-suite asserts="0" executed="True" name="EqualTest" result="Success" success="True" time="0.032" type="TestFixture">
                    <results>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Constraints.EqualTest.FailedStringMatchShowsFailurePosition" result="Success" success="True" time="0.022"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Constraints.EqualTest.LongStringsAreTruncated" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Constraints.EqualTest.LongStringsAreTruncatedAtBothEndsIfNecessary" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Constraints.EqualTest.LongStringsAreTruncatedAtFrontEndIfNecessary" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.EqualTest.TestPropertyWithPrivateSetter" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="FalseConstraintTest" result="Success" success="True" time="0.043" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.FalseConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.FalseConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" result="Success" success="True" time="0.001"/>
                      <test-suite asserts="0" executed="True" name="FailsWithBadValues" result="Success" success="True" time="0.004" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.FalseConstraintTest.FailsWithBadValues(null)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.FalseConstraintTest.FailsWithBadValues(&quot;hello&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.FalseConstraintTest.FailsWithBadValues(True)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.FalseConstraintTest.FailsWithBadValues(True)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="ProvidesProperFailureMessage" result="Success" success="True" time="0.021" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.FalseConstraintTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" result="Success" success="True" time="0.002"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.FalseConstraintTest.ProvidesProperFailureMessage(&quot;hello&quot;,&quot;\&quot;hello\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.FalseConstraintTest.ProvidesProperFailureMessage(True,&quot;True&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.FalseConstraintTest.ProvidesProperFailureMessage(True,&quot;True&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="SucceedsWithGoodValues" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.FalseConstraintTest.SucceedsWithGoodValues(False)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.FalseConstraintTest.SucceedsWithGoodValues(False)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="FloatingPointNumericsTest" result="Success" success="True" time="0.017" type="TestFixture">
                    <results>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Constraints.FloatingPointNumericsTest.DoubleEqualityWithUlps" result="Success" success="True" time="0.001"/>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Constraints.FloatingPointNumericsTest.FloatEqualityWithUlps" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.FloatingPointNumericsTest.MirroredDoubleReinterpretation" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.FloatingPointNumericsTest.MirroredFloatReinterpretation" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.FloatingPointNumericsTest.MirroredIntegerReinterpretation" result="Success" success="True" time="0.004"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.FloatingPointNumericsTest.MirroredLongReinterpretation" result="Success" success="True" time="0.003"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="MsgUtilTests" result="Success" success="True" time="0.022" type="TestFixture">
                    <results>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.ClipExpectedAndActual_StringsDoNotFitInLine" result="Success" success="True" time="0.002"/>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.ClipExpectedAndActual_StringsFitInLine" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.ClipExpectedAndActual_StringTailsFitInLine" result="Success" success="True" time="0.000"/>
                      <test-suite asserts="0" executed="True" name="EscapeControlCharsTest" result="Success" success="True" time="0.012" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\v&quot;,&quot;\\v&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\a&quot;,&quot;\\a&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\n&quot;,&quot;\\n&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\n\n&quot;,&quot;\\n\\n&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\n\n\n&quot;,&quot;\\n\\n\\n&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\r&quot;,&quot;\\r&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\f&quot;,&quot;\\f&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\t\n&quot;,&quot;\\t\\n&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" description="Paragraph separator character" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\x2029&quot;,&quot;\\x2029&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\n\r&quot;,&quot;\\n\\r&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;This is a\rtest message&quot;,&quot;This is a\\rtest message&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;&quot;,&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(null,null)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\t&quot;,&quot;\\t&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\r\n&quot;,&quot;\\r\\n&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\\r\\n&quot;,&quot;\\\\r\\\\n&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\b&quot;,&quot;\\b&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\r\r\r&quot;,&quot;\\r\\r\\r&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\r\r&quot;,&quot;\\r\\r&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" description="Next line character" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\x0085&quot;,&quot;\\x0085&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" description="Line separator character" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.EscapeControlCharsTest(&quot;\x2028&quot;,&quot;\\x2028&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="TestClipString" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.ClipAtStartAndEnd" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.NoClippingNeeded" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.ClipAtEnd" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.MsgUtilTests.ClipAtStart" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="NaNConstraintTest" result="Success" success="True" time="0.017" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NaNConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NaNConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" result="Success" success="True" time="0.000"/>
                      <test-suite asserts="0" executed="True" name="FailsWithBadValues" result="Success" success="True" time="0.005" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(null)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(&quot;hello&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(42)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(double.PositiveInfinity)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(double.NegativeInfinity)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(float.PositiveInfinity)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NaNConstraintTest.FailsWithBadValues(float.NegativeInfinity)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="ProvidesProperFailureMessage" result="Success" success="True" time="0.008" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(null,&quot;null&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(&quot;hello&quot;,&quot;\&quot;hello\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(42,&quot;42&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(double.PositiveInfinity,&quot;Infinity&quot;)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(double.NegativeInfinity,&quot;-Infinity&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(float.PositiveInfinity,&quot;Infinity&quot;)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NaNConstraintTest.ProvidesProperFailureMessage(float.NegativeInfinity,&quot;-Infinity&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="SucceedsWithGoodValues" result="Success" success="True" time="0.000" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NaNConstraintTest.SucceedsWithGoodValues(double.NaN)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NaNConstraintTest.SucceedsWithGoodValues(float.NaN)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="NullConstraintTest" result="Success" success="True" time="0.010" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NullConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NullConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" result="Success" success="True" time="0.000"/>
                      <test-suite asserts="0" executed="True" name="FailsWithBadValues" result="Success" success="True" time="0.000" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NullConstraintTest.FailsWithBadValues(&quot;hello&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="ProvidesProperFailureMessage" result="Success" success="True" time="0.000" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NullConstraintTest.ProvidesProperFailureMessage(&quot;hello&quot;,&quot;\&quot;hello\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="SucceedsWithGoodValues" result="Success" success="True" time="0.000" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NullConstraintTest.SucceedsWithGoodValues(null)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="NullOrEmptyStringConstraintTest" result="Success" success="True" time="0.009" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.ConstraintTestBaseNoData.ProvidesProperDescription" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" result="Success" success="True" time="0.000"/>
                      <test-suite asserts="0" executed="True" name="FailsWithBadValues" result="Success" success="True" time="0.001" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.FailsWithBadValues(&quot;Hello&quot;)" result="Success" success="True" time="0.001"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="InvalidDataThrowsArgumentException" result="Success" success="True" time="0.001" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.InvalidDataThrowsArgumentException(5)" result="Success" success="True" time="0.001"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="ProvidesProperFailureMessage" result="Success" success="True" time="0.000" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.ProvidesProperFailureMessage(&quot;Hello&quot;,&quot;\&quot;Hello\&quot;&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="SucceedsWithGoodValues" result="Success" success="True" time="0.001" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.SucceedsWithGoodValues(&quot;&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NullOrEmptyStringConstraintTest.SucceedsWithGoodValues(null)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="NumericsTest" result="Success" success="True" time="0.037" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.CanMatchDecimalWithoutToleranceMode" result="Success" success="True" time="0.006"/>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Constraints.NumericsTest.CanMatchDecimalWithPercentage" result="Success" success="True" time="0.001"/>
                      <test-suite asserts="0" executed="True" name="CanMatchIntegralsWithPercentage" result="Success" success="True" time="0.011" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10000UL)" result="Success" success="True" time="0.002"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10500UL)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(9500UL)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10000)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10500)" result="Success" success="True" time="0.002"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(9500L)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10000)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(9500)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10500L)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10000L)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(10500)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.CanMatchIntegralsWithPercentage(9500)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="CanMatchWithoutToleranceMode" result="Success" success="True" time="0.004" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(1234.568f)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(123456789UL)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(123456789L)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(1234.5678d)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(123456789)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.CanMatchWithoutToleranceMode(123456789)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.FailsOnDecimalAbovePercentage" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.FailsOnDecimalBelowPercentage" result="Success" success="True" time="0.001"/>
                      <test-suite asserts="0" executed="True" name="FailsOnIntegralsOutsideOfPercentage" result="Success" success="True" time="0.009" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(11500)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(8500UL)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(11500UL)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(11500)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(8500)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(8500)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(8500L)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.NumericsTest.FailsOnIntegralsOutsideOfPercentage(11500L)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="PredicateConstraintTests" result="Success" success="True" time="0.011" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PredicateConstraintTests.ConstraintTestBaseNoData.ProvidesProperDescription" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PredicateConstraintTests.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" result="Success" success="True" time="0.000"/>
                      <test-suite asserts="0" executed="True" name="FailsWithBadValues" result="Success" success="True" time="0.001" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PredicateConstraintTests.FailsWithBadValues(123)" result="Success" success="True" time="0.001"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="ProvidesProperFailureMessage" result="Success" success="True" time="0.000" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PredicateConstraintTests.ProvidesProperFailureMessage(123,&quot;123&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="SucceedsWithGoodValues" result="Success" success="True" time="0.001" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PredicateConstraintTests.SucceedsWithGoodValues(0)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PredicateConstraintTests.SucceedsWithGoodValues(-5)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="PropertyExistsTest" result="Success" success="True" time="0.026" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PropertyExistsTest.ConstraintTestBaseNoData.ProvidesProperDescription" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PropertyExistsTest.ConstraintTestBaseNoData.ProvidesProperStringRepresentation" result="Success" success="True" time="0.000"/>
                      <test-suite asserts="0" executed="True" name="FailsWithBadValues" result="Success" success="True" time="0.003" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PropertyExistsTest.FailsWithBadValues(42)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PropertyExistsTest.FailsWithBadValues(System.Collections.ArrayList)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PropertyExistsTest.FailsWithBadValues(System.Int32)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="InvalidDataThrowsException" result="Success" success="True" time="0.001" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Constraints.PropertyExistsTest.InvalidDataThrowsException(null)" result="Success" success="True" time="0.001"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="ProvidesProperFailureMessage" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PropertyExistsTest.ProvidesProperFailureMessage(42,&quot;&lt;System.Int32>&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PropertyExistsTest.ProvidesProperFailureMessage(System.Collections.ArrayList,&quot;&lt;System.Collections.ArrayList>&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PropertyExistsTest.ProvidesProperFailureMessage(System.Int32,&quot;&lt;System.Int32>&quot;)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="SucceedsWithGoodValues" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PropertyExistsTest.SucceedsWithGoodValues(System.Int32[])" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PropertyExistsTest.SucceedsWithGoodValues(&quot;hello&quot;)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Constraints.PropertyExistsTest.SucceedsWithGoodValues(System.Array)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite></results>
              </test-suite>
              <test-suite asserts="0" executed="True" name="Syntax" result="Success" success="True" time="5.286" type="Namespace">
                <results>
                  <test-suite asserts="0" executed="True" name="AtLeastTest" result="Success" success="True" time="0.071" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AtLeastTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.047"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AtLeastTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AtLeastTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/></results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="AtMostTest" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AtMostTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AtMostTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AtMostTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="AttributeTest" result="Success" success="True" time="0.005" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AttributeTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.004"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AttributeTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AttributeTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="AttributeTest_Generic" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AttributeTest_Generic.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AttributeTest_Generic.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AttributeTest_Generic.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="AttributeTestWithFollowingConstraint" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AttributeTestWithFollowingConstraint.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AttributeTestWithFollowingConstraint.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AttributeTestWithFollowingConstraint.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="BinarySerializableTest" result="Success" success="True" time="0.005" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.BinarySerializableTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.BinarySerializableTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.BinarySerializableTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="CollectionContainsTest" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionContainsTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionContainsTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionContainsTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="CollectionContainsTest_Comparer" result="Success" success="True" time="0.018" type="TestFixture">
                    <results>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer.ComparerIsCalled" result="Success" success="True" time="0.006"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer.ComparerIsCalledInExpression" result="Success" success="True" time="0.009"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="CollectionContainsTest_Comparer_String" result="Success" success="True" time="0.009" type="TestFixture">
                    <results>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer_String.ComparerIsCalled" result="Success" success="True" time="0.003"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer_String.ComparerIsCalledInExpression" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer_String.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer_String.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionContainsTest_Comparer_String.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="CollectionContainsTest_String" result="Success" success="True" time="0.002" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionContainsTest_String.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionContainsTest_String.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionContainsTest_String.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="CollectionEquivalentTest" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionEquivalentTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionEquivalentTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionEquivalentTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="CollectionMemberTest" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionMemberTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionMemberTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionMemberTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="CollectionMemberTest_Comparer" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionMemberTest_Comparer.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionMemberTest_Comparer.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionMemberTest_Comparer.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="CollectionOrderedByTest" result="Success" success="True" time="0.005" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedByTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedByTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedByTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="CollectionOrderedByTest_Comparer" result="Success" success="True" time="0.005" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="CollectionOrderedByTest_Comparer_Descending" result="Success" success="True" time="0.006" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer_Descending.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer_Descending.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedByTest_Comparer_Descending.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="CollectionOrderedByTest_Descending" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedByTest_Descending.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedByTest_Descending.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedByTest_Descending.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="CollectionOrderedTest" result="Success" success="True" time="0.002" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="CollectionOrderedTest_Comparer" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="CollectionOrderedTest_Comparer_Descending" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer_Descending.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer_Descending.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedTest_Comparer_Descending.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="CollectionOrderedTest_Descending" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedTest_Descending.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedTest_Descending.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionOrderedTest_Descending.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="CollectionSubsetTest" result="Success" success="True" time="0.062" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionSubsetTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionSubsetTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.044"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CollectionSubsetTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="MessageTest" result="Success" success="True" time="0.068" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.MessageTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.044"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.MessageTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.MessageTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/></results>
                  </test-suite><test-suite asserts="0" executed="True" name="MixedOperatorOverrides" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Syntax.MixedOperatorOverrides.ComplexTests" result="Success" success="True" time="0.003"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="NaNTest" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NaNTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NaNTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NaNTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="NegativeTest" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NegativeTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NegativeTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NegativeTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="NoneTest" result="Success" success="True" time="0.008" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NoneTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.004"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NoneTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NoneTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="NotOperatorOverride" result="Success" success="True" time="0.009" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotOperatorOverride.NotOperatorCanApplyToResolvableConstraintExpression" result="Success" success="True" time="0.006"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotOperatorOverride.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotOperatorOverride.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotOperatorOverride.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="NotSamePathOrUnderTest_IgnoreCase" result="Success" success="True" time="0.006" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.004"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="NotSamePathOrUnderTest_RespectCase" result="Success" success="True" time="0.020" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotSamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="NotSamePathTest_IgnoreCase" result="Success" success="True" time="0.005" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotSamePathTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotSamePathTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotSamePathTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="NotSamePathTest_RespectCase" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotSamePathTest_RespectCase.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotSamePathTest_RespectCase.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotSamePathTest_RespectCase.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="NotTest" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="NotTest_Cascaded" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotTest_Cascaded.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotTest_Cascaded.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NotTest_Cascaded.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="NullTest" result="Success" success="True" time="0.007" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NullTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NullTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.NullTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="OperatorPrecedenceTests" result="Success" success="True" time="0.020" type="TestFixture">
                    <results>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Syntax.OperatorPrecedenceTests.SomeTests" result="Success" success="True" time="0.015"/>
                      <test-case asserts="6" executed="True" name="NUnit.Framework.Syntax.OperatorPrecedenceTests.WithTests" result="Success" success="True" time="0.004"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="OrOperatorOverride" result="Success" success="True" time="0.010" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.OrOperatorOverride.OrOperatorCanCombineConstraintAndResolvableConstraintExpression" result="Success" success="True" time="0.005"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.OrOperatorOverride.OrOperatorCanCombineResolvableConstraintExpressionAndConstraint" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.OrOperatorOverride.OrOperatorCanCombineTwoResolvableConstraintExpressions" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.OrOperatorOverride.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.OrOperatorOverride.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.OrOperatorOverride.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="OrTest" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.OrTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.OrTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.OrTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="OrTest_ThreeOrs" result="Success" success="True" time="0.002" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.OrTest_ThreeOrs.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.OrTest_ThreeOrs.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.OrTest_ThreeOrs.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="PositiveTest" result="Success" success="True" time="0.007" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.PositiveTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.PositiveTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.PositiveTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="PropertyExistsTest" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.PropertyExistsTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.PropertyExistsTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.PropertyExistsTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="PropertyExistsTest_AndFollows" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.PropertyExistsTest_AndFollows.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.PropertyExistsTest_AndFollows.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.PropertyExistsTest_AndFollows.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="PropertySyntaxVariations" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Syntax.PropertySyntaxVariations.ExistenceTest" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Syntax.PropertySyntaxVariations.SeparateConstraintTest" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="PropertyTest_ConstraintFollows" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.PropertyTest_ConstraintFollows.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.PropertyTest_ConstraintFollows.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.PropertyTest_ConstraintFollows.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="PropertyTest_NotFollows" result="Success" success="True" time="0.047" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.PropertyTest_NotFollows.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.PropertyTest_NotFollows.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.PropertyTest_NotFollows.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.045"/></results>
                  </test-suite><test-suite asserts="0" executed="True" name="RegexTest" result="Success" success="True" time="0.006" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.RegexTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.RegexTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.RegexTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="RegexTest_IgnoreCase" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.RegexTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.RegexTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.RegexTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="SamePathOrUnderTest" result="Success" success="True" time="0.014" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SamePathOrUnderTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SamePathOrUnderTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SamePathOrUnderTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="SamePathOrUnderTest_IgnoreCase" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SamePathOrUnderTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="SamePathOrUnderTest_RespectCase" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SamePathOrUnderTest_RespectCase.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="SamePathTest" result="Success" success="True" time="0.002" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SamePathTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SamePathTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SamePathTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="SamePathTest_IgnoreCase" result="Success" success="True" time="0.006" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SamePathTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SamePathTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SamePathTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="SamePathTest_RespectCase" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SamePathTest_RespectCase.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SamePathTest_RespectCase.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SamePathTest_RespectCase.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="SomeTest" result="Success" success="True" time="0.008" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SomeTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.006"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SomeTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SomeTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="SomeTest_BeforeBinaryOperators" result="Success" success="True" time="0.005" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SomeTest_BeforeBinaryOperators.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.004"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SomeTest_BeforeBinaryOperators.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SomeTest_BeforeBinaryOperators.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="SomeTest_NestedSome" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SomeTest_NestedSome.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SomeTest_NestedSome.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SomeTest_NestedSome.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="SomeTest_UseOfAndSome" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SomeTest_UseOfAndSome.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SomeTest_UseOfAndSome.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SomeTest_UseOfAndSome.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="StartsWithTest" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.StartsWithTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.StartsWithTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.StartsWithTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="StartsWithTest_IgnoreCase" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.StartsWithTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.StartsWithTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.StartsWithTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="SubstringTest" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SubstringTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SubstringTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SubstringTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="SubstringTest_IgnoreCase" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SubstringTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SubstringTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.SubstringTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="TextContains" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.TextContains.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.TextContains.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.TextContains.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="TextEndsWithTest" result="Success" success="True" time="0.002" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.TextEndsWithTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.TextEndsWithTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.TextEndsWithTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="TextMatchesTest" result="Success" success="True" time="0.007" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.TextMatchesTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.TextMatchesTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.TextMatchesTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="TextStartsWithTest" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.TextStartsWithTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.TextStartsWithTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.TextStartsWithTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="ThrowsTests" result="Success" success="True" time="0.078" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ThrowsTests.DelegateThrowsException" result="Success" success="True" time="0.008"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ThrowsTests.LambdaThrowsException" result="Success" success="True" time="0.006"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ThrowsTests.LambdaThrowsExceptionWithMessage" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ThrowsTests.LambdaThrowsNothing" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ThrowsTests.ThrowsArgumentException" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ThrowsTests.ThrowsException" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionInstanceOf" result="Success" success="True" time="0.040"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionTypeOf" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionTypeOfAndConstraint" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionWithConstraint" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ThrowsTests.ThrowsExceptionWithInnerException" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ThrowsTests.ThrowsInnerException" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ThrowsTests.ThrowsInstanceOf" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ThrowsTests.ThrowsInvalidOperationException" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTargetInvocationExceptionWithInnerException" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeOf" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeOfAndConstraint" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeOfWithConstraint" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeOfWithInnerException" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ThrowsTests.ThrowsTypeofWithMessage" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="TrueTest" result="Success" success="True" time="0.005" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.TrueTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.TrueTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.TrueTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="UniqueTest" result="Success" success="True" time="0.021" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.UniqueTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.UniqueTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.UniqueTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="XmlSerializableTest" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.XmlSerializableTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.XmlSerializableTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.XmlSerializableTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="CountTest" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CountTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CountTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.CountTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="EmptyTest" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.EmptyTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.EmptyTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.EmptyTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="EndsWithTest" result="Success" success="True" time="0.011" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.EndsWithTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.EndsWithTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.EndsWithTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="EndsWithTest_IgnoreCase" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.EndsWithTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.EndsWithTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.EndsWithTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="EqualityTests" result="Success" success="True" time="0.035" type="TestFixture">
                    <results>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Syntax.EqualityTests.EqualityTestsUsingDefaultFloatingPointTolerance" result="Success" success="True" time="0.010"/>
                      <test-case asserts="8" executed="True" name="NUnit.Framework.Syntax.EqualityTests.EqualityTestsWithTolerance" result="Success" success="True" time="0.014"/>
                      <test-case asserts="6" executed="True" name="NUnit.Framework.Syntax.EqualityTests.EqualityTestsWithTolerance_MixedFloatAndDouble" result="Success" success="True" time="0.001"/>
                      <test-case asserts="7" executed="True" name="NUnit.Framework.Syntax.EqualityTests.EqualityTestsWithTolerance_MixingTypesGenerally" result="Success" success="True" time="0.001"/>
                      <test-case asserts="6" executed="True" name="NUnit.Framework.Syntax.EqualityTests.SimpleEqualityTests" result="Success" success="True" time="0.006"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="EqualToTest" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.EqualToTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.EqualToTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.EqualToTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="EqualToTest_IgnoreCase" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.EqualToTest_IgnoreCase.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.EqualToTest_IgnoreCase.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.EqualToTest_IgnoreCase.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="EqualToTest_WithinTolerance" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.EqualToTest_WithinTolerance.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.EqualToTest_WithinTolerance.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.EqualToTest_WithinTolerance.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="ExactTypeTest" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ExactTypeTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ExactTypeTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ExactTypeTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="ExactTypeTest_Generic" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ExactTypeTest_Generic.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ExactTypeTest_Generic.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ExactTypeTest_Generic.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="FalseTest" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.FalseTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.FalseTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.FalseTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="GreaterThanOrEqualTest" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.GreaterThanOrEqualTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.GreaterThanOrEqualTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.GreaterThanOrEqualTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="GreaterThanTest" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.GreaterThanTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.GreaterThanTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.GreaterThanTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="InstanceOfTest" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.InstanceOfTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.InstanceOfTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.InstanceOfTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="InstanceOfTest_Generic" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.InstanceOfTest_Generic.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.InstanceOfTest_Generic.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.InstanceOfTest_Generic.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="InstanceOfTypeTest" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.InstanceOfTypeTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.InstanceOfTypeTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.InstanceOfTypeTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="InstanceOfTypeTest_Generic" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.InstanceOfTypeTest_Generic.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.InstanceOfTypeTest_Generic.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.InstanceOfTypeTest_Generic.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="InvalidCodeTests" result="Success" success="True" time="1.400" type="TestFixture">
                    <results>
                      <test-suite asserts="0" executed="True" name="CodeShouldNotCompile" result="Success" success="True" time="0.955" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.Not.Null.GreaterThan(10))&quot;)" result="Success" success="True" time="0.478"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.Null.All&quot;)" result="Success" success="True" time="0.104"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.Null.And.Throws&quot;)" result="Success" success="True" time="0.099"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.All.And.And&quot;)" result="Success" success="True" time="0.090"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.Null.Not&quot;)" result="Success" success="True" time="0.091"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompile(&quot;Is.And&quot;)" result="Success" success="True" time="0.087"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="CodeShouldNotCompileAsFinishedConstraint" result="Success" success="True" time="0.441" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompileAsFinishedConstraint(&quot;Is.Not&quot;)" result="Success" success="True" time="0.132"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompileAsFinishedConstraint(&quot;Is.All.Not&quot;)" result="Success" success="True" time="0.124"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompileAsFinishedConstraint(&quot;Is.Not.All&quot;)" result="Success" success="True" time="0.092"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Syntax.InvalidCodeTests.CodeShouldNotCompileAsFinishedConstraint(&quot;Is.All&quot;)" result="Success" success="True" time="0.092"/>
                        </results>
                      </test-suite>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="LengthTest" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.LengthTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.LengthTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.LengthTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="LessThanOrEqualTest" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.LessThanOrEqualTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.LessThanOrEqualTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.LessThanOrEqualTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="LessThanTest" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.LessThanTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.LessThanTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.LessThanTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="AfterSyntaxUsingActualPassedByRef" result="Success" success="True" time="1.449" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.EqualToTest" result="Success" success="True" time="0.215"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.GreaterTest" result="Success" success="True" time="0.209"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.HasMemberTest" result="Success" success="True" time="0.208"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.NullTest" result="Success" success="True" time="0.202"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.SameAsTest" result="Success" success="True" time="0.203"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.TextTest" result="Success" success="True" time="0.204"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterSyntaxUsingActualPassedByRef.TrueTest" result="Success" success="True" time="0.204"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="AfterSyntaxUsingAnonymousDelegates" result="Success" success="True" time="1.548" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.EqualToTest" result="Success" success="True" time="0.207"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.GreaterTest" result="Success" success="True" time="0.202"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.HasMemberTest" result="Success" success="True" time="0.206"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.NullTest" result="Success" success="True" time="0.207"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.SameAsTest" result="Success" success="True" time="0.202"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.TextTest" result="Success" success="True" time="0.202"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.ThrowsTest" result="Success" success="True" time="0.110"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterSyntaxUsingAnonymousDelegates.TrueTest" result="Success" success="True" time="0.206"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="AfterTest_AndOperator" result="Success" success="True" time="0.006" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterTest_AndOperator.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterTest_AndOperator.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterTest_AndOperator.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="AfterTest_ProperyTest" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterTest_ProperyTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterTest_ProperyTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterTest_ProperyTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="AfterTest_SimpleConstraint" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterTest_SimpleConstraint.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterTest_SimpleConstraint.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AfterTest_SimpleConstraint.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="AllTest" result="Success" success="True" time="0.005" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AllTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AllTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AllTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="AndIsEvaluatedBeforeFollowingOr" result="Success" success="True" time="0.005" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AndIsEvaluatedBeforeFollowingOr.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AndIsEvaluatedBeforeFollowingOr.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AndIsEvaluatedBeforeFollowingOr.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="AndIsEvaluatedBeforePrecedingOr" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AndIsEvaluatedBeforePrecedingOr.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AndIsEvaluatedBeforePrecedingOr.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AndIsEvaluatedBeforePrecedingOr.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" description="Test" executed="True" name="AndOperatorOverride" result="Success" success="True" time="0.010" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AndOperatorOverride.AndOperatorCanCombineConstraintAndResolvableConstraintExpression" result="Success" success="True" time="0.005"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AndOperatorOverride.AndOperatorCanCombineResolvableConstraintExpressionAndConstraint" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AndOperatorOverride.AndOperatorCanCombineTwoResolvableConstraintExpressions" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AndOperatorOverride.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AndOperatorOverride.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AndOperatorOverride.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="AndTest" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AndTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AndTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AndTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="AndTest_ThreeAndsWithNot" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AndTest_ThreeAndsWithNot.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AndTest_ThreeAndsWithNot.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AndTest_ThreeAndsWithNot.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="ArbitraryConstraintMatching" result="Success" success="True" time="0.013" type="TestFixture">
                    <results>
                      <test-case asserts="5" executed="True" name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.ApplyMatchesToProperty" result="Success" success="True" time="0.005"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchCustomConstraint" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchCustomConstraintAfterPrefix" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchCustomConstraintsUnderAndOperator" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchLambda" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Syntax.ArbitraryConstraintMatching.CanMatchPredicate" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="AssignableFromTest" result="Success" success="True" time="0.005" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AssignableFromTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AssignableFromTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AssignableFromTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="AssignableFromTest_Generic" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AssignableFromTest_Generic.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AssignableFromTest_Generic.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AssignableFromTest_Generic.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="AssignableToTest" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AssignableToTest.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AssignableToTest.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AssignableToTest.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="AssignableToTest_Generic" result="Success" success="True" time="0.003" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AssignableToTest_Generic.SyntaxTest.SupportedByConstraintBuilder" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AssignableToTest_Generic.SyntaxTest.SupportedByInheritedSyntax" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Syntax.AssignableToTest_Generic.SyntaxTest.SupportedByStaticSyntax" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite></results>
              </test-suite>
              <test-suite asserts="0" executed="True" name="Tests" result="Success" success="True" time="1.681" type="Namespace">
                <results>
                  <test-suite asserts="0" executed="True" name="CollectionAssertTest" result="Success" success="True" time="0.224" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.ItemsNotNull" result="Success" success="True" time="0.039"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.ItemsNotNullFailure" result="Success" success="True" time="0.017"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.ItemsOfType" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.ItemsOfTypeFailure" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.NotEquivalent" result="Success" success="True" time="0.006"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.NotEquivalent_Fails" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.NotEquivalentHandlesNull" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.Unique_WithNull" result="Success" success="True" time="0.004"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.Unique_WithObjects" result="Success" success="True" time="0.004"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.Unique_WithStrings" result="Success" success="True" time="0.000"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.UniqueFailure" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.UniqueFailure_WithTwoNulls" result="Success" success="True" time="0.001"/>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual" result="Success" success="True" time="0.006"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual_HandlesNull" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual_UsingIterator" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual_UsingIterator_Fails" result="Success" success="True" time="0.020"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual_UsingLinqQuery" result="Success" success="True" time="0.021"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.AreEqual_UsingLinqQuery_Fails" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.AreEqualFail" result="Success" success="True" time="0.009"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.AreEqualFailCount" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.AreEquivalentHandlesNull" result="Success" success="True" time="0.006"/>
                      <test-case asserts="6" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.AreNotEqual" result="Success" success="True" time="0.003"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.AreNotEqual_Fails" result="Success" success="True" time="0.003"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.AreNotEqual_HandlesNull" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.Contains_ICollection" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.Contains_IList" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.ContainsFails_EmptyICollection" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.ContainsFails_EmptyIList" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.ContainsFails_ICollection" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.ContainsFails_ILIst" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.ContainsNull_ICollection" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.ContainsNull_IList" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.DoesNotContain" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.DoesNotContain_Empty" result="Success" success="True" time="0.000"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.DoesNotContain_Fails" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.EnsureComparerIsUsed" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.Equivalent" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.EquivalentFailOne" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.EquivalentFailTwo" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.IsNotSubsetOf" result="Success" success="True" time="0.003"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.IsNotSubsetOf_Fails" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.IsNotSubsetOfHandlesNull" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered" result="Success" success="True" time="0.006"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Allows_adjacent_equal_values" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_ContainedTypesMustBeCompatible" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Fails" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Handles_custom_comparison" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Handles_custom_comparison2" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_Handles_null" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.IsOrdered_TypesMustImplementIComparable" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.IsSubsetOf" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.IsSubsetOf_Fails" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.CollectionAssertTest.IsSubsetOfHandlesNull" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="ConditionAssertTests" result="Success" success="True" time="0.045" type="TestFixture">
                    <results>
                      <test-case asserts="5" executed="True" name="NUnit.Framework.Tests.ConditionAssertTests.IsEmpty" result="Success" success="True" time="0.003"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ConditionAssertTests.IsEmptyFailsOnNonEmptyArray" result="Success" success="True" time="0.005"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ConditionAssertTests.IsEmptyFailsOnNonEmptyIEnumerable" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ConditionAssertTests.IsEmptyFailsOnNullString" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ConditionAssertTests.IsEmptyFailsOnString" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.ConditionAssertTests.IsFalse" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ConditionAssertTests.IsFalseFails" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.ConditionAssertTests.IsNaN" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ConditionAssertTests.IsNaNFails" result="Success" success="True" time="0.002"/>
                      <test-case asserts="5" executed="True" name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmpty" result="Success" success="True" time="0.003"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyArray" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyArrayList" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyHashTable" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyIEnumerable" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ConditionAssertTests.IsNotEmptyFailsOnEmptyString" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.ConditionAssertTests.IsNotNull" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ConditionAssertTests.IsNotNullFails" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.ConditionAssertTests.IsNull" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ConditionAssertTests.IsNullFails" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.ConditionAssertTests.IsTrue" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ConditionAssertTests.IsTrueFails" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="DirectoryAssertTests" result="Success" success="True" time="0.137" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualFailsWhenOneDoesNotExist" result="Success" success="True" time="0.009"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualFailsWhenOneIsNull" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualFailsWithDirectoryInfos" result="Success" success="True" time="0.007"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualFailsWithStringPath" result="Success" success="True" time="0.004"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualPassesWhenBothAreNull" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualPassesWithDirectoryInfos" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.AreEqualPassesWithStringPath" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualFailsWhenBothAreNull" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualFailsWithDirectoryInfos" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualFailsWithStringPath" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualPassesIfOneIsNull" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualPassesWhenOneDoesNotExist" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.AreNotEqualPassesWithStringPath" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyFailsWithInvalidDirectory" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyFailsWithNonEmptyDirectoryUsingDirectoryInfo" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyFailsWithNonEmptyDirectoryUsingStringPath" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyPassesWithEmptyDirectoryUsingDirectoryInfo" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyPassesWithEmptyDirectoryUsingStringPath" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsEmptyThrowsUsingNull" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyFailsWithEmptyDirectoryUsingDirectoryInfo" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyFailsWithEmptyDirectoryUsingStringPath" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyFailsWithInvalidDirectory" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyPassesWithNonEmptyDirectoryUsingDirectoryInfo" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyPassesWithNonEmptyDirectoryUsingStringPath" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotEmptyThrowsUsingNull" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinFailsWithDirectoryInfo" result="Success" success="True" time="0.005"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinFailsWithStringPath" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinPassesWhenOutsidePathUsingDirectoryInfo" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinPassesWhenOutsidePathUsingStringPath" result="Success" success="True" time="0.002"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsNotWithinThrowsWhenBothAreNull" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinFailsWhenOutsidePathUsingDirectoryInfo" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinFailsWhenOutsidePathUsingStringPath" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinPassesWithDirectoryInfo" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinPassesWithStringPath" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinPassesWithTempPath" result="Success" success="True" time="0.030"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.DirectoryAssertTests.IsWithinThrowsWhenBothAreNull" result="Success" success="True" time="0.007"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="AssertThrowsTests" result="Success" success="True" time="0.130" type="TestFixture">
                    <results>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.AssertThrowsTests.NoExceptionThrown" result="Success" success="True" time="0.053"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.AssertThrowsTests.UnrelatedExceptionThrown" result="Success" success="True" time="0.012"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.AssertThrowsTests.BaseExceptionThrown" result="Success" success="True" time="0.022"/>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Tests.AssertThrowsTests.CanCatchExceptionOfDerivedType" result="Success" success="True" time="0.003"/>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Tests.AssertThrowsTests.CanCatchExceptionOfExactType" result="Success" success="True" time="0.001"/>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Tests.AssertThrowsTests.CanCatchUnspecifiedException" result="Success" success="True" time="0.001"/>
                      <test-case asserts="16" executed="True" name="NUnit.Framework.Tests.AssertThrowsTests.CorrectExceptionIsReturnedToMethod" result="Success" success="True" time="0.004"/>
                      <test-case asserts="5" executed="True" name="NUnit.Framework.Tests.AssertThrowsTests.CorrectExceptionThrown" result="Success" success="True" time="0.006"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.AssertThrowsTests.DerivedExceptionThrown" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.AssertThrowsTests.DoesNotThrowFails" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.AssertThrowsTests.DoesNotThrowSuceeds" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="AssumeThatTests" result="Success" success="True" time="0.086" type="TestFixture">
                    <results>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ActualAndConstraint" result="Success" success="True" time="0.007"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ActualAndConstraintWithMessage" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ActualAndConstraintWithMessageAndArgs" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_Boolean" result="Success" success="True" time="0.002"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_BooleanWithMessage" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_BooleanWithMessageAndArgs" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_DelegateAndConstraint" result="Success" success="True" time="0.003"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_DelegateAndConstraintWithMessage" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_DelegateAndConstraintWithMessageAndArgs" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ReferenceAndConstraint" result="Success" success="True" time="0.002"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ReferenceAndConstraintWithMessage" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.AssumptionPasses_ReferenceAndConstraintWithMessageAndArgs" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ActualAndConstraint" result="Success" success="True" time="0.004"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ActualAndConstraintWithMessage" result="Success" success="True" time="0.002"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ActualAndConstraintWithMessageAndArgs" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_Boolean" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_BooleanWithMessage" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_BooleanWithMessageAndArgs" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_DelegateAndConstraint" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_DelegateAndConstraintWithMessage" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_DelegateAndConstraintWithMessageAndArgs" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ReferenceAndConstraint" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ReferenceAndConstraintWithMessage" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.AssumeThatTests.FailureThrowsInconclusiveException_ReferenceAndConstraintWithMessageAndArgs" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="ArrayEqualsFailureMessageFixture" result="Success" success="True" time="0.075" type="TestFixture">
                    <results>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ActualArrayIsLonger" result="Success" success="True" time="0.031"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArrayAndCollection_Failure" result="Success" success="True" time="0.003"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArraysDeclaredAsDifferentTypes" result="Success" success="True" time="0.008"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArraysHaveDifferentRanks" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArraysWithDifferentDimensionsAsCollection" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ArraysWithDifferentRanksAsCollection" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.DifferentArrayTypesEqualFails" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.DoubleDimensionedArrays" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.ExpectedArrayIsLonger" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.FailureOnSingleDimensionedArrays" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.FiveDimensionedArrays" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.JaggedArrayComparedToSimpleArray" result="Success" success="True" time="0.006"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.JaggedArrays" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.SameLengthDifferentContent" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFailureMessageFixture.TripleDimensionedArrays" result="Success" success="True" time="0.002"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="ArrayEqualsFixture" result="Success" success="True" time="0.033" type="TestFixture">
                    <results>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFixture.ArrayAndCollection" result="Success" success="True" time="0.001"/>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFixture.ArrayIsEqualToItself" result="Success" success="True" time="0.001"/>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFixture.ArrayOfIntAndArrayOfDouble" result="Success" success="True" time="0.003"/>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysDeclaredAsDifferentTypes" result="Success" success="True" time="0.001"/>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfArrays" result="Success" success="True" time="0.001"/>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfDecimal" result="Success" success="True" time="0.004"/>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfDouble" result="Success" success="True" time="0.001"/>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfInt" result="Success" success="True" time="0.001"/>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfMixedTypes" result="Success" success="True" time="0.004"/>
                      <test-case asserts="5" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysOfString" result="Success" success="True" time="0.002"/>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysPassedAsObjects" result="Success" success="True" time="0.001"/>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysWithDifferentDimensionsMatchedAsCollection" result="Success" success="True" time="0.002"/>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFixture.ArraysWithDifferentRanksComparedAsCollection" result="Success" success="True" time="0.001"/>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFixture.DoubleDimensionedArrays" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFixture.FiveDimensionedArrays" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFixture.JaggedArrays" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ArrayEqualsFixture.TripleDimensionedArrays" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="ArrayNotEqualFixture" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Tests.ArrayNotEqualFixture.ArraysDeclaredAsDifferentTypes" result="Success" success="True" time="0.001"/>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Tests.ArrayNotEqualFixture.DifferentLengthArrays" result="Success" success="True" time="0.001"/>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Tests.ArrayNotEqualFixture.SameLengthDifferentContent" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="EqualsFixture" result="Success" success="True" time="0.139" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.EqualsFixture.Bug575936Int32Int64Comparison" result="Success" success="True" time="0.019"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.Byte" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.EqualsFixture.DateTimeEqual" result="Success" success="True" time="0.004"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.DateTimeNotEqual" result="Success" success="True" time="0.010"/>
                      <test-case asserts="6" executed="True" name="NUnit.Framework.Tests.EqualsFixture.Decimal" result="Success" success="True" time="0.005"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.EqualsFixture.DirectoryInfoEquality" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.EqualsFixture.DirectoryInfoEqualityIgnoresTrailingDirectorySeparator" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.DoubleNotEqualMessageDisplaysAllDigits" result="Success" success="True" time="0.006"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.DoubleNotEqualMessageDisplaysDefaultTolerance" result="Success" success="True" time="0.003"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.DoubleNotEqualMessageDisplaysTolerance" result="Success" success="True" time="0.003"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.DoubleNotEqualWithNanDoesNotDisplayDefaultTolerance" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.EqualsFixture.EnumsEqual" result="Success" success="True" time="0.000"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.EnumsNotEqual" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.Equals" result="Success" success="True" time="0.000"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.EqualsFail" result="Success" success="True" time="0.008"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.EqualsNaNFails" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.EqualsFixture.EqualsNull" result="Success" success="True" time="0.000"/>
                      <test-case asserts="31" executed="True" name="NUnit.Framework.Tests.EqualsFixture.EqualsSameTypes" result="Success" success="True" time="0.010"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.EqualsFixture.EqualsThrowsException" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.Float" result="Success" success="True" time="0.000"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.FloatNotEqualMessageDisplaysAllDigits" result="Success" success="True" time="0.003"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.FloatNotEqualMessageDisplaysTolerance" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.IEquatableSuccess_ConstraintSyntax" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.IEquatableSuccess_OldSyntax" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.Int" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.EqualsFixture.IntegerEquals" result="Success" success="True" time="0.000"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.IntegerLongComparison" result="Success" success="True" time="0.000"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.NanEqualsFails" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.EqualsFixture.NanEqualsNaNSucceeds" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.EqualsFixture.NegInfinityEqualsInfinity" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.EqualsFixture.PosInfinityEqualsInfinity" result="Success" success="True" time="0.000"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.PosInfinityNotEquals" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.PosInfinityNotEqualsNegInfinity" result="Success" success="True" time="0.001"/>
                      <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.EqualsFixture.ReferenceEqualsThrowsException" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.Short" result="Success" success="True" time="0.000"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.SinglePosInfinityNotEqualsNegInfinity" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.String" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.EqualsFixture.UInt" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="FileAssertTests" result="Success" success="True" time="0.087" type="TestFixture">
                    <results>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreEqualFailsWhenOneIsNull" result="Success" success="True" time="0.006"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreEqualFailsWithFileInfos" result="Success" success="True" time="0.009"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreEqualFailsWithFiles" result="Success" success="True" time="0.005"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreEqualFailsWithStreams" result="Success" success="True" time="0.004"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreEqualFailsWithTextFilesAfterReadingBothFiles" result="Success" success="True" time="0.004"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesUsingSameFileTwice" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWhenBothAreNull" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWithEqualStreams" result="Success" success="True" time="0.003"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWithFileInfos" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWithFiles" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWithSameStream" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreEqualPassesWithTextFiles" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualFailsWhenBothAreNull" result="Success" success="True" time="0.004"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualFailsWithFileInfos" result="Success" success="True" time="0.004"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualFailsWithFiles" result="Success" success="True" time="0.004"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualFailsWithStreams" result="Success" success="True" time="0.004"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualIteratesOverTheEntireFile" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualIteratesOverTheEntireFileAndFails" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualPassesIfOneIsNull" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualPassesWithFileInfos" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualPassesWithFiles" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.FileAssertTests.AreNotEqualPassesWithStreams" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.FileAssertTests.NonReadableStreamGivesException" result="Success" success="True" time="0.004"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.FileAssertTests.NonSeekableStreamGivesException" result="Success" success="True" time="0.003"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="GreaterEqualFixture" result="Success" success="True" time="0.123" type="TestFixture">
                    <results>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Tests.GreaterEqualFixture.FailureMessage" result="Success" success="True" time="0.007"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_Decimal" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_Double" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_Float" result="Success" success="True" time="0.032"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_Int32" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_Long" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_UInt32" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.GreaterEqualFixture.GreaterOrEqual_ULong" result="Success" success="True" time="0.001"/>
                      <test-case asserts="42" executed="True" name="NUnit.Framework.Tests.GreaterEqualFixture.MixedTypes" result="Success" success="True" time="0.005"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.GreaterEqualFixture.NotGreaterEqualIComparable" result="Success" success="True" time="0.038"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.GreaterEqualFixture.NotGreaterOrEqual" result="Success" success="True" time="0.002"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="GreaterFixture" result="Success" success="True" time="0.024" type="TestFixture">
                    <results>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.GreaterFixture.FailureMessage" result="Success" success="True" time="0.002"/>
                      <test-case asserts="7" executed="True" name="NUnit.Framework.Tests.GreaterFixture.Greater" result="Success" success="True" time="0.003"/>
                      <test-case asserts="42" executed="True" name="NUnit.Framework.Tests.GreaterFixture.MixedTypes" result="Success" success="True" time="0.004"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.GreaterFixture.NotGreater" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.GreaterFixture.NotGreaterIComparable" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.GreaterFixture.NotGreaterWhenEqual" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="LessEqualFixture" result="Success" success="True" time="0.022" type="TestFixture">
                    <results>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.LessEqualFixture.FailureMessage" result="Success" success="True" time="0.003"/>
                      <test-case asserts="42" executed="True" name="NUnit.Framework.Tests.LessEqualFixture.LessOrEqual" result="Success" success="True" time="0.011"/>
                      <test-case asserts="42" executed="True" name="NUnit.Framework.Tests.LessEqualFixture.MixedTypes" result="Success" success="True" time="0.003"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.LessEqualFixture.NotLessEqualIComparable" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.LessEqualFixture.NotLessOrEqual" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="LessFixture" result="Success" success="True" time="0.022" type="TestFixture">
                    <results>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Tests.LessFixture.FailureMessage" result="Success" success="True" time="0.004"/>
                      <test-case asserts="18" executed="True" name="NUnit.Framework.Tests.LessFixture.Less" result="Success" success="True" time="0.007"/>
                      <test-case asserts="42" executed="True" name="NUnit.Framework.Tests.LessFixture.MixedTypes" result="Success" success="True" time="0.003"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.LessFixture.NotLess" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.LessFixture.NotLessIComparable" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.LessFixture.NotLessWhenEqual" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="ListContentsTests" result="Success" success="True" time="0.026" type="TestFixture">
                    <results>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ListContentsTests.ArrayFails" result="Success" success="True" time="0.009"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ListContentsTests.ArrayListFails" result="Success" success="True" time="0.003"/>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Tests.ListContentsTests.ArrayListSucceeds" result="Success" success="True" time="0.004"/>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Tests.ListContentsTests.ArraySucceeds" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.ListContentsTests.DifferentTypesMayBeEqual" result="Success" success="True" time="0.003"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.ListContentsTests.EmptyArrayFails" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.ListContentsTests.NullArrayIsError" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="NotEqualFixture" result="Success" success="True" time="0.030" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.NotEqualFixture.ArraysNotEqual" result="Success" success="True" time="0.005"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.NotEqualFixture.ArraysNotEqualFails" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.NotEqualFixture.NotEqual" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.NotEqualFixture.NotEqualFails" result="Success" success="True" time="0.001"/>
                      <test-case asserts="21" executed="True" name="NUnit.Framework.Tests.NotEqualFixture.NotEqualSameTypes" result="Success" success="True" time="0.014"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.NotEqualFixture.NullEqualsNull" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.NotEqualFixture.NullNotEqualToNonNull" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.NotEqualFixture.UInt" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="NotSameFixture" result="Success" success="True" time="0.004" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.NotSameFixture.NotSame" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.NotSameFixture.NotSameFails" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="NullableTypesTests" result="Success" success="True" time="0.017" type="TestFixture">
                    <categories>
                      <category name="Generics"/>
                    </categories>
                    <results>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Tests.NullableTypesTests.CanCompareNullableEnums" result="Success" success="True" time="0.001"/>
                      <test-case asserts="36" executed="True" name="NUnit.Framework.Tests.NullableTypesTests.CanCompareNullableMixedNumerics" result="Success" success="True" time="0.004"/>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Tests.NullableTypesTests.CanCompareNullableStructs" result="Success" success="True" time="0.001"/>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Tests.NullableTypesTests.CanCompareWithTolerance" result="Success" success="True" time="0.003"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.NullableTypesTests.CanTestForNaN" result="Success" success="True" time="0.002"/>
                      <test-case asserts="4" executed="True" name="NUnit.Framework.Tests.NullableTypesTests.CanTestForNull" result="Success" success="True" time="0.002"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="RandomizerTests" result="Success" success="True" time="0.015" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.RandomizerTests.RandomDoublesAreUnique" result="Success" success="True" time="0.004"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.RandomizerTests.RandomIntsAreUnique" result="Success" success="True" time="0.001"/>
                      <test-case asserts="10" executed="True" name="NUnit.Framework.Tests.RandomizerTests.RandomizersWithDifferentSeedsReturnDifferentValues" result="Success" success="True" time="0.001"/>
                      <test-case asserts="10" executed="True" name="NUnit.Framework.Tests.RandomizerTests.RandomizersWithSameSeedsReturnSameValues" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.RandomizerTests.RandomSeedsAreUnique" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.RandomizerTests.ReturnsDifferentRandomizersForDifferentMethods" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.RandomizerTests.ReturnsSameRandomizerForDifferentParametersOfSameMethod" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.RandomizerTests.ReturnsSameRandomizerForSameMethod" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.RandomizerTests.ReturnsSameRandomizerForSameParameter" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="RangeTests" result="Success" success="True" time="0.032" type="TestFixture">
                    <results>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.RangeTests.InRangeFails" result="Success" success="True" time="0.013"/>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Tests.RangeTests.InRangeSucceeds" result="Success" success="True" time="0.006"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.RangeTests.NotInRangeFails" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.RangeTests.NotInRangeSucceeds" result="Success" success="True" time="0.001"/>
                      <test-suite asserts="0" executed="True" name="RangeBoundaryConditions" result="Success" success="True" time="0.004" type="ParameterizedTest">
                        <results>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.RangeTests.RangeBoundaryConditions(9,9,10)" result="Success" success="True" time="0.001"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.RangeTests.RangeBoundaryConditions(9,9,9)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.RangeTests.RangeBoundaryConditions(10,9,10)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.RangeTests.ShouldThrowExceptionIfFromIsLessThanTo" result="Success" success="True" time="0.002"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="SameFixture" result="Success" success="True" time="0.005" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.SameFixture.Same" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.SameFixture.SameFails" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.SameFixture.SameValueTypes" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="StringAssertTests" result="Success" success="True" time="0.250" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.StringAssertTests.CaseInsensitiveCompare" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.StringAssertTests.CaseInsensitiveCompareFails" result="Success" success="True" time="0.058"/>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Tests.StringAssertTests.Contains" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.StringAssertTests.ContainsFails" result="Success" success="True" time="0.003"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.StringAssertTests.DifferentEncodingsOfSameStringAreNotEqual" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.StringAssertTests.DoesNotContain" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.StringAssertTests.DoesNotContainFails" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.StringAssertTests.DoesNotEndWith" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.StringAssertTests.DoesNotEndWithFails" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.StringAssertTests.DoesNotStartWith" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.StringAssertTests.DoesNotStartWithFails" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.StringAssertTests.EndsWith" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.StringAssertTests.EndsWithFails" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.StringAssertTests.IsMatch" result="Success" success="True" time="0.167"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.StringAssertTests.IsMatchFails" result="Success" success="True" time="0.003"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.StringAssertTests.StartsWith" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.StringAssertTests.StartsWithFails" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite>
                  <test-suite asserts="0" executed="True" name="TestFixtureAttributeTests" result="Success" success="True" time="0.009" type="TestFixture">
                    <results>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithCombinedArgs" result="Success" success="True" time="0.002">
                        <categories>
                          <category name="Generics"/>
                        </categories>
                      </test-case>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithFixtureArgs" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithFixtureArgsAndSetTypeArgs" result="Success" success="True" time="0.001">
                        <categories>
                          <category name="Generics"/>
                        </categories>
                      </test-case>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithJustTypeArgs" result="Success" success="True" time="0.001">
                        <categories>
                          <category name="Generics"/>
                        </categories>
                      </test-case>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithNoArgumentsAndSetTypeArgs" result="Success" success="True" time="0.001">
                        <categories>
                          <category name="Generics"/>
                        </categories>
                      </test-case>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.TestFixtureAttributeTests.ConstructWithoutArguments" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="TextMessageWriterTests" result="Success" success="True" time="0.025" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.TextMessageWriterTests.ConnectorIsWrittenWithSurroundingSpaces" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.TextMessageWriterTests.DateTimeTest" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.TextMessageWriterTests.DecimalIsWrittenToTwentyNineDigits" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.TextMessageWriterTests.DecimalIsWrittenWithTrailingM" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.TextMessageWriterTests.DisplayStringDifferences" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.TextMessageWriterTests.DisplayStringDifferences_NoClipping" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.TextMessageWriterTests.DoubleIsWrittenToSeventeenDigits" result="Success" success="True" time="0.007"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.TextMessageWriterTests.DoubleIsWrittenWithTrailingD" result="Success" success="True" time="0.000"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.TextMessageWriterTests.FloatIsWrittenToNineDigits" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.TextMessageWriterTests.FloatIsWrittenWithTrailingF" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.TextMessageWriterTests.IntegerIsWrittenAsIs" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.TextMessageWriterTests.PredicateIsWrittenWithTrailingSpace" result="Success" success="True" time="0.000"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.TextMessageWriterTests.StringIsWrittenWithQuotes" result="Success" success="True" time="0.000"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="TypeAssertTests" result="Success" success="True" time="0.024" type="TestFixture">
                    <results>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.TypeAssertTests.ExactType" result="Success" success="True" time="0.001"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.TypeAssertTests.ExactTypeFails" result="Success" success="True" time="0.002"/>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Tests.TypeAssertTests.IsAssignableFrom" result="Success" success="True" time="0.003"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.TypeAssertTests.IsAssignableFromFails" result="Success" success="True" time="0.002"/>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Tests.TypeAssertTests.IsInstanceOf" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.TypeAssertTests.IsInstanceOfFails" result="Success" success="True" time="0.002"/>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Tests.TypeAssertTests.IsNotAssignableFrom" result="Success" success="True" time="0.003"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.TypeAssertTests.IsNotAssignableFromFails" result="Success" success="True" time="0.001"/>
                      <test-case asserts="3" executed="True" name="NUnit.Framework.Tests.TypeAssertTests.IsNotInstanceOf" result="Success" success="True" time="0.002"/>
                      <test-case asserts="2" executed="True" name="NUnit.Framework.Tests.TypeAssertTests.IsNotInstanceOfFails" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite><test-suite asserts="0" executed="True" name="ValuesAttributeTests" result="Success" success="True" time="0.062" type="TestFixture">
                    <results>
                      <test-suite asserts="0" executed="True" name="CanConverDoubleToDecimal" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConverDoubleToDecimal(12.5m)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="CanConvertDoubleRangeToDecimal" result="Success" success="True" time="0.003" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertDoubleRangeToDecimal(1m)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertDoubleRangeToDecimal(1.1m)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertDoubleRangeToDecimal(1.2m)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertDoubleRangeToDecimal(1.3m)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="CanConvertIntRangeToByte" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToByte(1)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToByte(2)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToByte(3)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="CanConvertIntRangeToDecimal" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToDecimal(1m)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToDecimal(2m)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToDecimal(3m)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="CanConvertIntRangeToSByte" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToSByte(1)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToSByte(2)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToSByte(3)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="CanConvertIntRangeToShort" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToShort(1)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToShort(2)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntRangeToShort(3)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="CanConvertIntToDecimal" result="Success" success="True" time="0.001" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertIntToDecimal(12m)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="CanConvertRandomDoubleToDecimal" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomDoubleToDecimal(7.40957047669663m)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomDoubleToDecimal(9.43047261630673m)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomDoubleToDecimal(3.48693588491852m)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="CanConvertRandomIntToByte" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToByte(2)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToByte(5)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToByte(6)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="CanConvertRandomIntToDecimal" result="Success" success="True" time="0.003" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToDecimal(9m)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToDecimal(2m)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToDecimal(6m)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="CanConvertRandomIntToSByte" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToSByte(8)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToSByte(1)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToSByte(7)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="CanConvertRandomIntToShort" result="Success" success="True" time="0.002" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToShort(5)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToShort(4)" result="Success" success="True" time="0.000"/>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertRandomIntToShort(4)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="CanConvertSmallIntsToByte" result="Success" success="True" time="0.001" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertSmallIntsToByte(5)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="CanConvertSmallIntsToSByte" result="Success" success="True" time="0.001" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertSmallIntsToSByte(5)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="CanConvertSmallIntsToShort" result="Success" success="True" time="0.001" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertSmallIntsToShort(5)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-suite asserts="0" executed="True" name="CanConvertStringToDecimal" result="Success" success="True" time="0.001" type="ParameterizedTest">
                        <results>
                          <test-case asserts="0" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.CanConvertStringToDecimal(12.5m)" result="Success" success="True" time="0.000"/>
                        </results>
                      </test-suite>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.RangeAttributeWithDoubleRangeAndStep" result="Success" success="True" time="0.009"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.RangeAttributeWithFloatRangeAndStep" result="Success" success="True" time="0.004"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.RangeAttributeWithIntRange" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.RangeAttributeWithIntRangeAndStep" result="Success" success="True" time="0.001"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.RangeAttributeWithLongRangeAndStep" result="Success" success="True" time="0.002"/>
                      <test-case asserts="1" executed="True" name="NUnit.Framework.Tests.ValuesAttributeTests.ValuesAttributeProvidesSpecifiedValues" result="Success" success="True" time="0.001"/>
                    </results>
                  </test-suite></results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>

</test-results>
